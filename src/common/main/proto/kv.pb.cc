// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kv.proto

#include "kv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace st {
namespace kv {
namespace proto {
class valueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<value> _instance;
} _value_default_instance_;
}  // namespace proto
}  // namespace kv
}  // namespace st
static void InitDefaultsvalue_kv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::st::kv::proto::_value_default_instance_;
    new (ptr) ::st::kv::proto::value();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::st::kv::proto::value::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_value_kv_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsvalue_kv_2eproto}, {}};

namespace st {
namespace kv {
namespace proto {

// ===================================================================

void value::InitAsDefaultInstance() {
}
class value::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int value::kExpireFieldNumber;
const int value::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

value::value()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:st.kv.proto.value)
}
value::value(const value& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.data().size() > 0) {
        data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    expire_ = from.expire_;
    // @@protoc_insertion_point(copy_constructor:st.kv.proto.value)
}

void value::SharedCtor() {
    ::google::protobuf::internal::InitSCC(&scc_info_value_kv_2eproto.base);
    data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    expire_ = 0u;
}

value::~value() {
  // @@protoc_insertion_point(destructor:st.kv.proto.value)
  SharedDtor();
}

void value::SharedDtor() { data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited()); }

void value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const value& value::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_value_kv_2eproto.base);
  return *internal_default_instance();
}


void value::Clear() {
// @@protoc_insertion_point(message_clear_start:st.kv.proto.value)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char *value::_InternalParse(const char *begin, const char *end, void *object,
                                  ::google::protobuf::internal::ParseContext *ctx) {
    auto msg = static_cast<value *>(object);
    ::google::protobuf::int32 size;
    (void) size;
    int depth;
    (void) depth;
    ::google::protobuf::uint32 tag;
    ::google::protobuf::internal::ParseFunc parser_till_end;
    (void) parser_till_end;
    auto ptr = begin;
    while (ptr < end) {
        ptr = ::google::protobuf::io::Parse32(ptr, &tag);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        switch (tag >> 3) {
            // uint32 expire = 1;
            case 1: {
                if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
                msg->set_expire(::google::protobuf::internal::ReadVarint(&ptr));
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
                break;
            }
            // bytes data = 2;
            case 2: {
                if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
                ptr = ::google::protobuf::io::ReadSize(ptr, &size);
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
                object = msg->mutable_data();
                if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
                    parser_till_end = ::google::protobuf::internal::GreedyStringParser;
                    goto string_till_end;
                }
                GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
                ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
                ptr += size;
                break;
            }
            default: {
            handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->EndGroup(tag);
                    return ptr;
                }
                auto res = UnknownFieldParse(tag, {_InternalParse, msg}, ptr, end,
                                             msg->_internal_metadata_.mutable_unknown_fields(), ctx);
                ptr = res.first;
                GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
                if (res.second) return ptr;
            }
        }// switch
    }    // while
    return ptr;
string_till_end:
    static_cast<::std::string *>(object)->clear();
    static_cast<::std::string *>(object)->reserve(size);
    goto len_delim_till_end;
len_delim_till_end:
    return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg}, {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:st.kv.proto.value)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 expire = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
              DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(input, this->mutable_data()));
          } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:st.kv.proto.value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:st.kv.proto.value)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
    // @@protoc_insertion_point(serialize_start:st.kv.proto.value)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // uint32 expire = 1;
    if (this->expire() != 0) {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expire(), output);
    }

    // bytes data = 2;
    if (this->data().size() > 0) {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(2, this->data(), output);
    }

    output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                     static_cast<int>(_internal_metadata_.unknown_fields().size()));
    // @@protoc_insertion_point(serialize_end:st.kv.proto.value)
}

size_t value::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:st.kv.proto.value)
    size_t total_size = 0;

    total_size += _internal_metadata_.unknown_fields().size();

    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // bytes data = 2;
    if (this->data().size() > 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->data());
    }

    // uint32 expire = 1;
    if (this->expire() != 0) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->expire());
    }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void value::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const value*>(&from));
}

void value::MergeFrom(const value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:st.kv.proto.value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.expire() != 0) {
      set_expire(from.expire());
  }
}

void value::CopyFrom(const value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:st.kv.proto.value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool value::IsInitialized() const {
  return true;
}

void value::Swap(value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void value::InternalSwap(value* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  swap(expire_, other->expire_);
}

::std::string value::GetTypeName() const {
  return "st.kv.proto.value";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace kv
}  // namespace st
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::st::kv::proto::value* Arena::CreateMaybeMessage< ::st::kv::proto::value >(Arena* arena) {
  return Arena::CreateInternal< ::st::kv::proto::value >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
