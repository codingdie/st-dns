cmake_minimum_required(VERSION 3.11)
project(st-dns)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -g -lpthread")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Os")

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif ()

if (DEFINED ENV{OPENSSL_ROOT_DIR})
    set(OPENSSL_ROOT_DIR $ENV{OPENSSL_ROOT_DIR})
endif ()
if (OPENSSL_ROOT_DIR)
    set(OPENSSL_INCLUDE_DIR ${OPENSSL_ROOT_DIR}/include)
    if (CMAKE_HOST_APPLE)
        set(OPENSSL_LIBRARIES ${OPENSSL_ROOT_DIR}/lib/libssl.dylib ${OPENSSL_ROOT_DIR}/lib/libcrypto.dylib)
    else (CMAKE_HOST_APPLE)
        set(OPENSSL_LIBRARIES ${OPENSSL_ROOT_DIR}/lib/libssl.so ${OPENSSL_ROOT_DIR}/lib/libcrypto.so)
    endif ()
else ()
    find_package(OpenSSL 1.1.0 REQUIRED)
endif ()
find_package(Boost 1.66.0 REQUIRED COMPONENTS system filesystem thread)
include_directories(${Boost_INCLUDE_DIR})
include_directories(${OPENSSL_INCLUDE_DIR})
message("${OPENSSL_INCLUDE_DIR}")
message("${OPENSSL_LIBRARIES}")
include_directories(src/core/dns)
include_directories(src/core/whois)
include_directories(src/core/protocol/dns)
include_directories(src/core/utils)

file(GLOB_RECURSE SOURCE_FILES ./src/core/*.cpp)

message("${SOURCE_FILES}")
add_executable(st-dns src/server/main.cpp ${SOURCE_FILES})
add_executable(st-dns-test src/test/main.cpp ${SOURCE_FILES})

target_link_libraries(st-dns ${Boost_LIBRARIES} ${OPENSSL_LIBRARIES})
target_link_libraries(st-dns-test ${Boost_LIBRARIES} ${OPENSSL_LIBRARIES})

include(GNUInstallDirs)
if (OPENWRT)
    install(TARGETS st-dns DESTINATION sbin)
else (CMAKE_HOST_UNIX)
    install(TARGETS st-dns DESTINATION bin)
endif ()
install(DIRECTORY area-ips DESTINATION etc/st)

if (OPENWRT)
    install(DIRECTORY confs/openwrt/ DESTINATION etc/st/dns)
elseif (APPLE)
    install(DIRECTORY confs/darwin/ DESTINATION etc/st/dns)
elseif (UNIX)
    install(DIRECTORY confs/linux/ DESTINATION etc/st/dns)
endif ()

#get_cmake_property(_variableNames VARIABLES)
#foreach (_variableName ${_variableNames})
#    message(STATUS "${_variableName}=${${_variableName}}")
#endforeach ()