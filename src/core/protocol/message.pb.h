// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_INCLUDED_message_2eproto
#define PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
namespace st {
namespace dns {
namespace proto {
class record;
class recordDefaultTypeInternal;
extern recordDefaultTypeInternal _record_default_instance_;
class records;
class recordsDefaultTypeInternal;
extern recordsDefaultTypeInternal _records_default_instance_;
class records_MapEntry_DoNotUse;
class records_MapEntry_DoNotUseDefaultTypeInternal;
extern records_MapEntry_DoNotUseDefaultTypeInternal _records_MapEntry_DoNotUse_default_instance_;
class reverse_record;
class reverse_recordDefaultTypeInternal;
extern reverse_recordDefaultTypeInternal _reverse_record_default_instance_;
}  // namespace proto
}  // namespace dns
}  // namespace st
namespace google {
namespace protobuf {
template<> ::st::dns::proto::record* Arena::CreateMaybeMessage<::st::dns::proto::record>(Arena*);
template<> ::st::dns::proto::records* Arena::CreateMaybeMessage<::st::dns::proto::records>(Arena*);
template<> ::st::dns::proto::records_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::st::dns::proto::records_MapEntry_DoNotUse>(Arena*);
template<> ::st::dns::proto::reverse_record* Arena::CreateMaybeMessage<::st::dns::proto::reverse_record>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace st {
namespace dns {
namespace proto {

// ===================================================================

class record :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:st.dns.proto.record) */ {
 public:
  record();
  virtual ~record();

  record(const record& from);

  inline record& operator=(const record& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  record(record&& from) noexcept
    : record() {
    *this = ::std::move(from);
  }

  inline record& operator=(record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const record* internal_default_instance() {
    return reinterpret_cast<const record*>(
               &_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(record* other);
  friend void swap(record& a, record& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline record* New() const final {
    return CreateMaybeMessage<record>(nullptr);
  }

  record* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<record>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const record& from);
  void MergeFrom(const record& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ips = 4;
  int ips_size() const;
  void clear_ips();
  static const int kIpsFieldNumber = 4;
  ::google::protobuf::uint32 ips(int index) const;
  void set_ips(int index, ::google::protobuf::uint32 value);
  void add_ips(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ips() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ips();

  // uint32 expire = 1;
  void clear_expire();
  static const int kExpireFieldNumber = 1;
  ::google::protobuf::uint32 expire() const;
  void set_expire(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:st.dns.proto.record)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ips_;
  mutable std::atomic<int> _ips_cached_byte_size_;
  ::google::protobuf::uint32 expire_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class records_MapEntry_DoNotUse : public ::google::protobuf::internal::MapEntryLite<records_MapEntry_DoNotUse, 
    ::std::string, ::st::dns::proto::record,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntryLite<records_MapEntry_DoNotUse, 
    ::std::string, ::st::dns::proto::record,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  records_MapEntry_DoNotUse();
  records_MapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const records_MapEntry_DoNotUse& other);
  static const records_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const records_MapEntry_DoNotUse*>(&_records_MapEntry_DoNotUse_default_instance_); }
};

// -------------------------------------------------------------------

class records :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:st.dns.proto.records) */ {
 public:
  records();
  virtual ~records();

  records(const records& from);

  inline records& operator=(const records& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  records(records&& from) noexcept
    : records() {
    *this = ::std::move(from);
  }

  inline records& operator=(records&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const records& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const records* internal_default_instance() {
    return reinterpret_cast<const records*>(
               &_records_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(records* other);
  friend void swap(records& a, records& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline records* New() const final {
    return CreateMaybeMessage<records>(nullptr);
  }

  records* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<records>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const records& from);
  void MergeFrom(const records& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(records* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .st.dns.proto.record> map = 2;
  int map_size() const;
  void clear_map();
  static const int kMapFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::st::dns::proto::record >&
      map() const;
  ::google::protobuf::Map< ::std::string, ::st::dns::proto::record >*
      mutable_map();

  // string domain = 1;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // @@protoc_insertion_point(class_scope:st.dns.proto.records)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::MapFieldLite<
      records_MapEntry_DoNotUse,
      ::std::string, ::st::dns::proto::record,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class reverse_record :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:st.dns.proto.reverse_record) */ {
 public:
  reverse_record();
  virtual ~reverse_record();

  reverse_record(const reverse_record& from);

  inline reverse_record& operator=(const reverse_record& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  reverse_record(reverse_record&& from) noexcept
    : reverse_record() {
    *this = ::std::move(from);
  }

  inline reverse_record& operator=(reverse_record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const reverse_record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const reverse_record* internal_default_instance() {
    return reinterpret_cast<const reverse_record*>(
               &_reverse_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(reverse_record* other);
  friend void swap(reverse_record& a, reverse_record& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline reverse_record* New() const final {
    return CreateMaybeMessage<reverse_record>(nullptr);
  }

  reverse_record* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<reverse_record>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const reverse_record& from);
  void MergeFrom(const reverse_record& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(reverse_record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string domains = 2;
  int domains_size() const;
  void clear_domains();
  static const int kDomainsFieldNumber = 2;
  const ::std::string& domains(int index) const;
  ::std::string* mutable_domains(int index);
  void set_domains(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_domains(int index, ::std::string&& value);
  #endif
  void set_domains(int index, const char* value);
  void set_domains(int index, const char* value, size_t size);
  ::std::string* add_domains();
  void add_domains(const ::std::string& value);
  #if LANG_CXX11
  void add_domains(::std::string&& value);
  #endif
  void add_domains(const char* value);
  void add_domains(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& domains() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_domains();

  // uint32 ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:st.dns.proto.reverse_record)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> domains_;
  ::google::protobuf::uint32 ip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// record

// uint32 expire = 1;
inline void record::clear_expire() {
  expire_ = 0u;
}
inline ::google::protobuf::uint32 record::expire() const {
  // @@protoc_insertion_point(field_get:st.dns.proto.record.expire)
  return expire_;
}
inline void record::set_expire(::google::protobuf::uint32 value) {
  
  expire_ = value;
  // @@protoc_insertion_point(field_set:st.dns.proto.record.expire)
}

// repeated uint32 ips = 4;
inline int record::ips_size() const {
  return ips_.size();
}
inline void record::clear_ips() {
  ips_.Clear();
}
inline ::google::protobuf::uint32 record::ips(int index) const {
  // @@protoc_insertion_point(field_get:st.dns.proto.record.ips)
  return ips_.Get(index);
}
inline void record::set_ips(int index, ::google::protobuf::uint32 value) {
  ips_.Set(index, value);
  // @@protoc_insertion_point(field_set:st.dns.proto.record.ips)
}
inline void record::add_ips(::google::protobuf::uint32 value) {
  ips_.Add(value);
  // @@protoc_insertion_point(field_add:st.dns.proto.record.ips)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
record::ips() const {
  // @@protoc_insertion_point(field_list:st.dns.proto.record.ips)
  return ips_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
record::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:st.dns.proto.record.ips)
  return &ips_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// records

// string domain = 1;
inline void records::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& records::domain() const {
  // @@protoc_insertion_point(field_get:st.dns.proto.records.domain)
  return domain_.GetNoArena();
}
inline void records::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:st.dns.proto.records.domain)
}
#if LANG_CXX11
inline void records::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:st.dns.proto.records.domain)
}
#endif
inline void records::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:st.dns.proto.records.domain)
}
inline void records::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:st.dns.proto.records.domain)
}
inline ::std::string* records::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:st.dns.proto.records.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* records::release_domain() {
  // @@protoc_insertion_point(field_release:st.dns.proto.records.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void records::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:st.dns.proto.records.domain)
}

// map<string, .st.dns.proto.record> map = 2;
inline int records::map_size() const {
  return map_.size();
}
inline void records::clear_map() {
  map_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::st::dns::proto::record >&
records::map() const {
  // @@protoc_insertion_point(field_map:st.dns.proto.records.map)
  return map_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::st::dns::proto::record >*
records::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:st.dns.proto.records.map)
  return map_.MutableMap();
}

// -------------------------------------------------------------------

// reverse_record

// uint32 ip = 1;
inline void reverse_record::clear_ip() {
  ip_ = 0u;
}
inline ::google::protobuf::uint32 reverse_record::ip() const {
  // @@protoc_insertion_point(field_get:st.dns.proto.reverse_record.ip)
  return ip_;
}
inline void reverse_record::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:st.dns.proto.reverse_record.ip)
}

// repeated string domains = 2;
inline int reverse_record::domains_size() const {
  return domains_.size();
}
inline void reverse_record::clear_domains() {
  domains_.Clear();
}
inline const ::std::string& reverse_record::domains(int index) const {
  // @@protoc_insertion_point(field_get:st.dns.proto.reverse_record.domains)
  return domains_.Get(index);
}
inline ::std::string* reverse_record::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:st.dns.proto.reverse_record.domains)
  return domains_.Mutable(index);
}
inline void reverse_record::set_domains(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:st.dns.proto.reverse_record.domains)
  domains_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void reverse_record::set_domains(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:st.dns.proto.reverse_record.domains)
  domains_.Mutable(index)->assign(std::move(value));
}
#endif
inline void reverse_record::set_domains(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:st.dns.proto.reverse_record.domains)
}
inline void reverse_record::set_domains(int index, const char* value, size_t size) {
  domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:st.dns.proto.reverse_record.domains)
}
inline ::std::string* reverse_record::add_domains() {
  // @@protoc_insertion_point(field_add_mutable:st.dns.proto.reverse_record.domains)
  return domains_.Add();
}
inline void reverse_record::add_domains(const ::std::string& value) {
  domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:st.dns.proto.reverse_record.domains)
}
#if LANG_CXX11
inline void reverse_record::add_domains(::std::string&& value) {
  domains_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:st.dns.proto.reverse_record.domains)
}
#endif
inline void reverse_record::add_domains(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:st.dns.proto.reverse_record.domains)
}
inline void reverse_record::add_domains(const char* value, size_t size) {
  domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:st.dns.proto.reverse_record.domains)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
reverse_record::domains() const {
  // @@protoc_insertion_point(field_list:st.dns.proto.reverse_record.domains)
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
reverse_record::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:st.dns.proto.reverse_record.domains)
  return &domains_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dns
}  // namespace st

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_message_2eproto
